function updatePredictionUI(data){console.log("updatePredictionUI çağrıldı");window.predictionData=data;$('#homeTeamName').text(data.home_team.name);$('#awayTeamName').text(data.away_team.name);console.log("API değerleri değiştirilmeden kullanılıyor-tutarlılık backend'de sağlanıyor");if(data.predictions&&data.predictions.match_winner){const homeProb=Math.round(data.predictions.match_winner.home_win*100);const drawProb=Math.round(data.predictions.match_winner.draw*100);const awayProb=Math.round(data.predictions.match_winner.away_win*100);updateProbabilityBars(homeProb,drawProb,awayProb)}if(data.predictions){let scoreValue="";if(data.predictions.exact_score&&data.predictions.exact_score.score){scoreValue=data.predictions.exact_score.score;if(data.predictions.debug_final_check&&data.predictions.debug_final_check.includes('Tutarsızlık giderildi')){const scoreMatch=data.predictions.debug_final_check.match(/Skor\s+([0-9]+-[0-9]+)\s+->\s+([0-9]+-[0-9]+)/);if(scoreMatch&&scoreMatch[2]){scoreValue=scoreMatch[2];console.warn("DÜZELTME YAPILDI:Tutarsızlık giderilmiş skor kullanılıyor:",scoreValue)}}$('#predictedScore').text(scoreValue)}if(data.predictions.betting_predictions){updateBettingPredictions(data.predictions.betting_predictions)}}populateTeamForms(data);updateMotivationTable(data);updateHTFTPredictions(data);enableTeamStatButtons(data);const timestamp=data.timestamp ? new Date(data.timestamp):new Date();const formattedDate=timestamp.toLocaleString();$('#predictionTimestamp').text(formattedDate);$('#predictionModal').modal('show');window.predictionModalInitialized=true;if($('#htftPredictionSection').length>0){$('#htftPredictionSection').remove()}$('#predictionModal').animate({scrollTop:0},'slow')}function updateProbabilityBars(homeProb,drawProb,awayProb){$('#homeWinBar').css('width',homeProb+'%').text(homeProb+'%');$('#drawBar').css('width',drawProb+'%').text(drawProb+'%');$('#awayWinBar').css('width',awayProb+'%').text(awayProb+'%')}function calculateBettingValuesFromScore(homeGoals,awayGoals){const totalGoals=homeGoals+awayGoals;const predictions={};console.log("Skor üzerinden hesaplanan bahis tahminleri:",predictions);return predictions}function updateBettingPredictions(bettingPredictions){console.log("Bahis tahminleri güncelleniyor-YENİ TUTARLI ALGORİTMA");console.log("API'den gelen bahis tahminleri:",bettingPredictions);const currentDomScore=$('#predictedScore').text().trim();console.log("DOM'daki mevcut skor:",currentDomScore);let predictedScore="";let scoreHomeGoals=0;let scoreAwayGoals=0;let validScore=false;if(bettingPredictions.exact_score&&bettingPredictions.exact_score.prediction){try{const scoreFromAPI=bettingPredictions.exact_score.prediction;const[scoreHome,scoreAway]=scoreFromAPI.split("-").map(Number);if(!isNaN(scoreHome)&&!isNaN(scoreAway)){scoreHomeGoals=scoreHome;scoreAwayGoals=scoreAway;validScore=true;predictedScore=scoreFromAPI;console.log("Skor API'den başarıyla alındı:",predictedScore)}}catch(e){console.error("API skor ayrıştırma hatası:",e)}}else if(currentDomScore&&currentDomScore.includes("-")){try{const[scoreHome,scoreAway]=currentDomScore.split("-").map(Number);if(!isNaN(scoreHome)&&!isNaN(scoreAway)){scoreHomeGoals=scoreHome;scoreAwayGoals=scoreAway;validScore=true;predictedScore=currentDomScore;console.log("Skor DOM'dan alındı:",predictedScore)}}catch(e){console.error("DOM skor ayrıştırma hatası:",e)}}if(!validScore){console.warn("Geçerli bir skor tahmini bulunamadı,varsayılan 1-1 kullanılıyor");scoreHomeGoals=1;scoreAwayGoals=1;predictedScore="1-1";validScore=true}const totalGoals=scoreHomeGoals+scoreAwayGoals;console.log("Skor bazlı sabit olasılık override sistemi devre dışı-Monte Carlo sonuçları korunuyor");$('#totalGoals').text(totalGoals.toFixed(1));const over25Prediction=bettingPredictions.over_2_5_goals.prediction;const over25Value=bettingPredictions.over_2_5_goals.display_value;const over25Prob=bettingPredictions.over_2_5_goals.probability;const isOver25=over25Prediction==='YES';const bttsPrediction=bettingPredictions.btts.prediction;const bttsValue=bettingPredictions.btts.display_value;const bttsProbValue=bettingPredictions.btts.probability;const isBtts=bttsPrediction==='YES';console.log("Hesaplanan bahis değerleri:",{score:predictedScore,totalGoals,over_2_5:{value:over25Value,probability:over25Prob},btts:{value:bttsValue,probability:bttsProbValue}});if(isOver25){$('#over25Value').text('ÜST');$('#over25Prob').text(Math.round(over25Prob*100)+'%');$('#over25Icon').html('<i class="fas fa-arrow-up text-primary"></i>')}else{$('#over25Value').text('ALT');$('#over25Prob').text(Math.round((1-over25Prob)*100)+'%');$('#over25Icon').html('<i class="fas fa-arrow-down text-danger"></i>')}if(isBtts){$('#bttsValue').text('KG VAR');$('#bttsProb').text(Math.round(bttsProbValue*100)+'%');$('#bttsIcon').html('<i class="fas fa-check text-success"></i>')}else{$('#bttsValue').text('KG YOK');$('#bttsProb').text(Math.round((1-bttsProbValue)*100)+'%');$('#bttsIcon').html('<i class="fas fa-times text-danger"></i>')}$('.betting-card').removeClass('d-none');updateBettingCard('#over25Card',isOver25 ? 'ÜST':'ALT',Math.round(isOver25 ? over25Prob*100:(1-over25Prob)*100)+'%',isOver25 ? 'text-primary':'text-danger',isOver25 ? 'fa-arrow-up':'fa-arrow-down');updateBettingCard('#bttsCard',isBtts ? 'KG VAR':'KG YOK',Math.round(isBtts ? bttsProbValue*100:(1-bttsProbValue)*100)+'%',isBtts ? 'text-success':'text-danger',isBtts ? 'fa-check':'fa-times');console.log("GÜNCELLENMIŞ VE TUTARLI BAHİS TAHMİNLERİ:",{exact_score:predictedScore,over_2_5:bettingPredictions.over_2_5_goals,btts:bettingPredictions.btts})}function updateBettingCard(cardSelector,value,probability,colorClass,iconClass){const card=$(cardSelector);if(card.length){const valueElement=card.find('.betting-value');const probabilityElement=card.find('.betting-probability');const iconElement=card.find('.betting-icon i');valueElement.text(value);probabilityElement.text(probability);iconElement.removeClass();iconElement.addClass('fas '+iconClass+' '+colorClass)}}function populateTeamForms(data){if(data.home_team&&data.home_team.form&&data.away_team&&data.away_team.form){displayTeamForm('#homeTeamForm',data.home_team.form);displayTeamForm('#awayTeamForm',data.away_team.form)}}function displayTeamForm(selector,formData){if(formData){const formContainer=$(selector);formContainer.empty();const formTable=$('<table class="form-stats-table"></table>');const rows=[{label:'Maç',value:formData.matches_played||0},{label:'Galibiyet',value:formData.wins||0},{label:'Beraberlik',value:formData.draws||0},{label:'Mağlubiyet',value:formData.losses||0},{label:'Attığı Gol',value:formData.goals_scored||0},{label:'Yediği Gol',value:formData.goals_conceded||0},{label:'Maç Başı Gol',value:formData.avg_goals_scored ? formData.avg_goals_scored.toFixed(2):'0.00'},{label:'İlk Yarı Gol',value:formData.first_half_goals ? formData.first_half_goals.toFixed(2):'0.00'}];rows.forEach(row=>{formTable.append(`<tr><td>${row.label}</td><td class="text-right">${row.value}</td></tr>`)});formContainer.append(formTable)}}function updateMotivationTable(data){if(data.home_team&&data.away_team){const homeForm=data.home_team.form||{};const awayForm=data.away_team.form||{};const calculateFormScore=(form)=>{if(!form)return 0;const matches=form.matches_played||0;if(matches===0)return 0;const wins=form.wins||0;const draws=form.draws||0;return Math.min(5,Math.round(((wins*3+draws)/(matches*3))*5))};const calculateGoalForm=(form)=>{if(!form)return 0;const avgGoals=form.avg_goals_scored||0;return Math.min(5,Math.round(avgGoals*2))};const homeAdvantage=4;const awayDisadvantage=2;const calculateFatigue=(form)=>{if(!form||!form.recent_matches)return 0;const recentMatches=form.recent_matches.length;return Math.min(5,Math.round(recentMatches/2))};const leaguePositionDiff=()=>{const homePos=data.home_team.league_position||10;const awayPos=data.away_team.league_position||10;return Math.min(5,Math.max(0,Math.round(Math.abs(homePos-awayPos)/4)))};const calculateMotivation=(team)=>{return 3};const homeFormScore=calculateFormScore(homeForm);const awayFormScore=calculateFormScore(awayForm);const homeGoalForm=calculateGoalForm(homeForm);const awayGoalForm=calculateGoalForm(awayForm);const homeFatigue=calculateFatigue(homeForm);const awayFatigue=calculateFatigue(awayForm);const positionDiff=leaguePositionDiff();const homeMotivation=calculateMotivation(data.home_team);const awayMotivation=calculateMotivation(data.away_team);updateFormMotivationUI(homeFormScore,awayFormScore,homeGoalForm,awayGoalForm,homeAdvantage,awayDisadvantage,homeFatigue,awayFatigue,positionDiff,homeMotivation,awayMotivation)}}function updateFormMotivationUI(homeForm,awayForm,homeGoalForm,awayGoalForm,homeAdvantage,awayDisadvantage,homeFatigue,awayFatigue,positionDiff,homeMotivation,awayMotivation){const motivationTable=$('#motivationTable');motivationTable.empty();const factors=[{name:'Form',home:homeForm,away:awayForm,higher_better:true},{name:'Gol Formu',home:homeGoalForm,away:awayGoalForm,higher_better:true},{name:'Ev/Dep. Faktörü',home:homeAdvantage,away:awayDisadvantage,higher_better:true},{name:'Yorgunluk',home:homeFatigue,away:awayFatigue,higher_better:false},{name:'Motivasyon',home:homeMotivation,away:awayMotivation,higher_better:true}];const headerRow=$('<tr></tr>');headerRow.append('<th>Faktör</th>');headerRow.append('<th class="text-center">Ev</th>');headerRow.append('<th class="text-center">Deplasman</th>');motivationTable.append(headerRow);factors.forEach(factor=>{const row=$('<tr></tr>');row.append(`<td>${factor.name}</td>`);const homeClass=getFavorableClass(factor.home,factor.away,factor.higher_better);row.append(`<td class="text-center ${homeClass}">${getStarRating(factor.home)}</td>`);const awayClass=getFavorableClass(factor.away,factor.home,factor.higher_better);row.append(`<td class="text-center ${awayClass}">${getStarRating(factor.away)}</td>`);motivationTable.append(row)})}function getFavorableClass(value1,value2,higher_better){if(higher_better){if(value1>value2)return 'text-success';if(value1<value2)return 'text-danger'}else{if(value1<value2)return 'text-success';if(value1>value2)return 'text-danger'}return ''}function getStarRating(value){const fullStars=Math.floor(value);const halfStar=value-fullStars>=0.5;const emptyStars=5-fullStars-(halfStar ? 1:0);let stars='';for(let i=0;i<fullStars;i++){stars+='<i class="fas fa-star"></i>'}if(halfStar){stars+='<i class="fas fa-star-half-alt"></i>'}for(let i=0;i<emptyStars;i++){stars+='<i class="far fa-star"></i>'}return stars}function updateHTFTPredictions(data){if(data.predictions&&data.predictions.betting_predictions&&data.predictions.betting_predictions.half_time_full_time){createHTFTPredictionUI(data.predictions.betting_predictions.half_time_full_time)}}function createHTFTPredictionUI(htftData){const htftSection=$('<div id="htftPredictionSection" class="mt-4"></div>');htftSection.append('<h5 class="text-center mb-3">İlk Yarı/Maç Sonu Tahminleri</h5>');const htftTable=$('<table class="table table-bordered htft-table"></table>');const outcomes=['1','X','2'];const headerRow=$('<tr></tr>');headerRow.append('<th class="text-center">İY/MS</th>');outcomes.forEach(outcome=>{headerRow.append(`<th class="text-center">MS:${outcome}</th>`)});htftTable.append(headerRow);outcomes.forEach(htOutcome=>{const row=$('<tr></tr>');row.append(`<th class="text-center">İY:${htOutcome}</th>`);outcomes.forEach(ftOutcome=>{const combination=`${htOutcome}/${ftOutcome}`;const cellClass=getCombinationClass(combination,htftData);const probability=getCombinationProbability(combination,htftData);row.append(`<td class="text-center ${cellClass}">${combination}<br><small>${probability}%</small></td>`)});htftTable.append(row)});htftSection.append(htftTable);if(htftData.prediction){const mostLikely=htftData.prediction;const mostLikelyProb=htftData.probability ? Math.round(htftData.probability*100):"?";htftSection.append(`<div class="alert alert-info mt-3"><strong>En Olası İY/MS:</strong>${mostLikely}(${mostLikelyProb}%)</div>`)}$('#predictionModal .modal-body').append(htftSection)}function getCombinationClass(combination,htftData){if(htftData.prediction===combination){return 'bg-info text-white font-weight-bold'}if(combination.endsWith('/1')){return 'bg-success-light'}else if(combination.endsWith('/X')){return 'bg-secondary-light'}else if(combination.endsWith('/2')){return 'bg-primary-light'}return ''}function getCombinationProbability(combination,htftData){if(htftData.probabilities&&htftData.probabilities[combination]){return Math.round(htftData.probabilities[combination]*100)}if(htftData.prediction===combination){return Math.round(htftData.probability*100)||30}const defaultValues={'1/1':15,'1/X':8,'1/2':4,'X/1':10,'X/X':12,'X/2':8,'2/1':5,'2/X':8,'2/2':15};return defaultValues[combination]||5}function enableTeamStatButtons(data){if(data.home_team&&data.home_team.id){$('#homeTeamStatBtn').attr('data-team-id',data.home_team.id);$('#homeTeamStatBtn').removeClass('disabled')}if(data.away_team&&data.away_team.id){$('#awayTeamStatBtn').attr('data-team-id',data.away_team.id);$('#awayTeamStatBtn').removeClass('disabled')}}$(document).on('click','#closePredictionModal',function(){$('#predictionModal').modal('hide');$('.filter-blur').removeClass('filter-blur');console.log("Modal kapandı,arka plan filtreleri temizlendi")});$(document).on('click','.team-stat-btn',function(){const teamId=$(this).attr('data-team-id');if(teamId){showTeamStats(teamId)}});function refreshPrediction(){console.log("refreshPrediction fonksiyonu çalıştırıldı");if(window.predictionData){console.log("Tahmin verileri yenilendi:",window.predictionData);updatePredictionUI(window.predictionData)}else{console.error("Tahmin güncellenirken hata:",window.predictionData)}}function showTeamStats(teamId){$.ajax({url:`/api/v3/fixtures/team/${teamId}`,method:'GET',success:function(data){createTeamStatsModal(data,teamId)},error:function(err){console.error("Takım istatistikleri alınırken hata:",err);showErrorModal("Takım istatistikleri alınamadı. Lütfen daha sonra tekrar deneyin.")}})}function createTeamStatsModal(matches,teamId){const teamName=window.predictionData ?(window.predictionData.home_team.id==teamId ? window.predictionData.home_team.name:window.predictionData.away_team.name):"Takım";const modal=$(`<div class="modal fade" id="teamStatsModal" tabindex="-1" role="dialog" aria-labelledby="teamStatsModalLabel" aria-hidden="true"><div class="modal-dialog modal-lg" role="document"><div class="modal-content"><div class="modal-header"><h5 class="modal-title" id="teamStatsModalLabel">${teamName}-Son Maçlar</h5><button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button></div><div class="modal-body"><div class="matches-list"><table class="table"><thead><tr><th>Tarih</th><th>Maç</th><th>Skor</th></tr></thead><tbody id="teamMatches"></tbody></table></div></div><div class="modal-footer"><button type="button" class="btn btn-secondary" data-dismiss="modal">Kapat</button></div></div></div></div>`);const matchesList=modal.find('#teamMatches');if(matches&&matches.length>0){matches.forEach(match=>{matchesList.append(`<tr><td>${match.date}</td><td>${match.match}</td><td>${match.score}</td></tr>`)})}else{matchesList.append(`<tr><td colspan="3" class="text-center">Bu takım için maç verisi bulunamadı.</td></tr>`)}$('body').append(modal);$('#teamStatsModal').modal('show');$('#teamStatsModal').on('hidden.bs.modal',function(){$(this).remove()})}function showErrorModal(message){const modal=$(`<div class="modal fade" id="errorModal" tabindex="-1" role="dialog" aria-hidden="true"><div class="modal-dialog" role="document"><div class="modal-content"><div class="modal-header"><h5 class="modal-title">Hata</h5><button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button></div><div class="modal-body"><p>${message}</p></div><div class="modal-footer"><button type="button" class="btn btn-secondary" data-dismiss="modal">Tamam</button></div></div></div></div>`);$('body').append(modal);$('#errorModal').modal('show');$('#errorModal').on('hidden.bs.modal',function(){$(this).remove()})}